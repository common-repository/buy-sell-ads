<?php
/*
Plugin Name: Buy Sell Ads
Plugin URI: http://omninoggin.com/projects/wordpress-plugins/buy-sell-ads-wordpress-plugin/
Description: This plugin helps you easily integrate Buy Sell Ads with anti-AdBlock measures.
Version: 1.1.2
Author: Thaya Kareeson
Author URI: http://omninoggin.com
*/

/*
Copyright 2009 Thaya Kareeson (email : thaya.kareeson@gmail.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

require_once('widget-zone.class.php');

class BuySellAds {

  var $bsa_url = 's3.buysellads.com';
  var $homepage = 'http://omninoggin.com/wordpress-plugins/buy-sell-ads-wordpress-plugin/';
  var $name = 'buy_sell_ads'; 
  var $name_dashed = 'buy-sell-ads';
  var $version = '1.1.2';

  var $is_excerpt = false;
  var $c = null;

  function BuySellAds() {
    // load text domain for translations
    load_plugin_textdomain($this->name);

    // initialize common functions
    require_once('common.php');
    $this->c = new BuySellAdsCommon($this);
  }

  function get_default_options() {
    return array(
      'deprecated_options' => array('after_widget', 'after_zone', 'before_widget', 'before_zone', 'cache_interval', 'nofollow', 'repeat', 'show_ad_here', 'style', 'widget_ids', 'widget_title'),
      'enable_aab' => false,
      'hide_empty_widget' => false,
      'nonce_ts' => 0,
      'nonce_interval' => 1800,
      'show_link' => true,
      'site_key' => null,
      'version' => $this->version,
      'zone_ts' => 0,
      'zone_interval' => 1800,
      'zones' => array(),
      'zone_settings' => array(),
      'default_zone_settings' => array(
        'placement' => 'widget',
        'position' => 'before',
      )
    );
  }

  function activate() {
    $this->upgrade_options();
    $this->set_nonce_proxy();
  }

  function queue_jquery() {
    wp_enqueue_script('jquery');
  }

  function queue_styles() {
    wp_enqueue_style('bsa_style_admin');
  }

  function register_styles() {
    wp_register_style('bsa_style_admin',
      $this->get_plugin_url().'/css/style-bsa-admin.css');
  }

  function embed_bsa_js() {
    if (!is_admin()) {
      printf("
        <!-- BuySellAds.com Ad Code (Generated by Buy Sell Ads Plugin)-->
        <script type=\"text/javascript\">
        (function(){
          var bsa = document.createElement('script');
             bsa.type = 'text/javascript';
             bsa.async = true;
             bsa.src = '//s3.buysellads.com/ac/bsa.js';
          (document.getElementsByTagName('head')[0]||document.getElementsByTagName('body')[0]).appendChild(bsa);
        })();
        </script>
        <!-- END BuySellAds.com Ad Code -->
        "
      );
    }
  }

  function set_nonce_proxy() {
    $this->set_nonce('nonce_proxy');
  }

  function set_nonce($seed) {
    $bsa_options = get_option($this->name);
    $bsa_options[$seed] = substr(md5(wp_create_nonce($name . $seed)), rand(0, 23), rand(4, 8));
    $bsa_options['nonce_ts'] = time();
    update_option($this->name, $bsa_options);
  }

  function need_upgrade() {
    $bsa_options = get_option($this->name);
    if ( array_key_exists('version', $bsa_options ) ) {
      $old_version_arr = split('\.', $bsa_options['version']);
      $new_version_arr = split('\.', $this->version);
      for($i = 0; $i < 3; $i++)
      {
        if ( (int)$new_version_arr[$i] > (int)$old_version_arr[$i] ) {
          return true;
        }
        elseif ( (int)$new_version_arr[$i] < (int)$old_version_arr[$i] ) {
          return false;
        }
      }
      return false;
    }
    return true;
  }

  function encrypt($string, $key) {
    $result = '';
    for($i=0; $i<strlen($string); $i++) {
      $char = substr($string, $i, 1);
      $keychar = substr($key, ($i % strlen($key))-1, 1);
      $char = chr(ord($char)+ord($keychar));
      $result.=$char;
    }

    return base64_encode($result);
  }

  function decrypt($string, $key) {
    $result = '';
    $string = base64_decode($string);
    
    for($i=0; $i<strlen($string); $i++) {
      $char = substr($string, $i, 1);
      $keychar = substr($key, ($i % strlen($key))-1, 1);
      $char = chr(ord($char)-ord($keychar));
      $result.=$char;
    }
    
    return $result;
  } 

  //function encrypt($string, $key) {
  //  return base64_encode($string);
  //}

  //function decrypt($string, $key) {
  //  return base64_decode($string);
  //} 

  function new_encrypted_url($matches) {
    $bsa_options = get_option($this->name);
    $ec = $this->encrypt($matches[1], $bsa_options['nonce_proxy']);
    return get_option('siteurl').'/'.$bsa_options['nonce_proxy'].$ec.'//'.$matches[2];
  }

  function replace_links($content) {
    $content = preg_replace_callback("/(?<!href=['\"])(http:\/\/[^\/]*?buysellads.*?)([\"'])/", array($this, 'new_encrypted_url'), $content);
    return $content;
  }

  function fetch($req_uri) {
    $ch = curl_init();
    $timeout = 5; // set to zero for no timeout
    curl_setopt ($ch, CURLOPT_URL, $req_uri);
    curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt ($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
    $content = curl_exec($ch);
    curl_close($ch);

    if ( $content ) {
      if ( is_array($content) ) {
        $content = implode($content);
      }
      return $content;
    }
    else {
      // cannot open URL
      return '';
    }
  }

  function fetch_content($req_uri) {
    $ec = $this->get_ec($req_uri);
    if ( strlen($ec) > 0 ) {
      $bsa_options = get_option($this->name);
      $dc = $this->decrypt($ec, $bsa_options['nonce_proxy']);
      $url = str_replace($bsa_options['nonce_proxy'], '', $req_uri);
      $url = trim($url, '/');
      $url = str_replace($ec, $dc, $url);
      return $this->replace_links($this->fetch($url));
    }
    else {
      return '';
    }
  }

  function get_ec($uri) {
    $bsa_options = get_option($this->name);
    $nonce_proxy = $bsa_options['nonce_proxy'];
    preg_match("/.*$nonce_proxy(.*?)\/\//", $uri, $matches);
    return $matches[1];
  }

  function proxy() {
    $bsa_options = get_option($this->name);
    if ( $bsa_options['enable_aab'] ) {
      $req_uri = $_SERVER['REQUEST_URI'];
      // intercept only BSA plugin specific request
      if ( strrpos($req_uri, $bsa_options['nonce_proxy']) ) {
        // fetch content from encrypted url
        echo $this->fetch_content($req_uri);
        exit();
      }

      // generate new nonce if it's time
      if ( (time() - $bsa_options['nonce_ts']) > $bsa_options['nonce_interval'] ) {
        $this->set_nonce_proxy();
      }
    }
  }

  function check_version() {
    if ( $this->need_upgrade() ) {
      $this->upgrade_options();
      printf('<div class="updated fade"><p>%s</p></div>', __('Buy Sell Ads options has been upgraded.', $this->name));
    }
  }

  function check_for_zone_update() {
    $bsa_options = get_option($this->name);
    // update zone info if it's time
    if ( (time() - $bsa_options['zone_ts']) > $bsa_options['zone_interval'] ) {
      $this->update_zones_info();
    }
  }

  function update_zones_info() {
    $bsa_options = get_option($this->name);
    if (isset($bsa_options['site_key']) && !empty($bsa_options['site_key'])) {
      $zones_info = $this->fetch('http://'.$this->bsa_url.'/r/s_'.$bsa_options['site_key'].'.js');
      preg_match('/^_bsap.interpret_json\((.*)\);$/', $zones_info, $matches);
      $data = json_decode($matches[1], true);
      $zones = array();
      foreach ($data['zones'] as $zone) {
        $zones[$zone['id']] = $zone;
      }
      $bsa_options['zones'] = $zones;
      $defaults = $this->get_default_options();
      foreach ($bsa_options['zones'] as $k => $v) {
        if (!isset($bsa_options['zone_settings'][$v['id']])) {
          $bsa_options['zone_settings'][$v['id']] = $defaults['default_zone_settings'];
        }
      }
      $bsa_options['zone_ts'] = time();
      update_option($this->name, $bsa_options);
    }
  }

  function update_options() {
    // new options
    $bsa_new_options = stripslashes_deep($_POST['bsa_options_update']);

    // current options
    $bsa_current_options = get_option($this->name);

    // convert "on" to true and "off" to false for checkbox fields
    // and set defaults for fields that are left blank
    if ( isset($bsa_new_options['enable_aab']) ) {
      $bsa_new_options['enable_aab'] = true;
      $bsa_new_options['enable_aab'] = false;
    }
    else
      $bsa_new_options['enable_aab'] = false;
      
    if ( isset($bsa_new_options['hide_empty_widget']) && $bsa_new_options['hide_empty_widget'] == "on")
      $bsa_new_options['hide_empty_widget'] = true;
    else
      $bsa_new_options['hide_empty_widget'] = false;

    if ( isset($bsa_new_options['show_link']) && $bsa_new_options['show_link'] == "on")
      $bsa_new_options['show_link'] = true;
    else
      $bsa_new_options['show_link'] = false;

    if ( isset($bsa_new_options['nonce_interval']) && !is_numeric($bsa_new_options['nonce_interval']) )
      $bsa_new_options['nonce_interval'] = $bsa_current_options['nonce_interval'];

    // Update options
    foreach($bsa_new_options as $key => $value) {
      $bsa_current_options[$key] = $value;
    }

    update_option($this->name, $bsa_current_options);
  }

  function upgrade_options() {
    $bsa_options = get_option($this->name);
    if ( !$bsa_options ) {
      add_option($this->name, $this->get_default_options());
    }
    else {
      // include new options
      $default_options = $this->get_default_options();
      foreach($default_options as $option_name => $option_value) {
        if(!isset($bsa_options[$option_name])) {
          $bsa_options[$option_name] = $option_value;
        }
      }
      $bsa_options['version'] = $this->version;
      // get rid of deprecated options
      foreach($default_options['deprecated_options'] as $option_name) {
        if(isset($bsa_options[$option_name])) {
          unset($bsa_options[$option_name]);
        }
      }
      // re-index
      update_option($this->name, $bsa_options);
    }
  }

  function reset_options() {
    $bsa_options = get_option($this->name);
    if ( !$bsa_options ) {
      add_option($this->name, $this->get_default_options());
    }
    else {
      $default_options = $this->get_default_options();
      update_option($this->name, $default_options);
    }
  }

  function get_content_dir() {
    // Pre-2.6 compatibility
    if ( !defined('WP_CONTENT_DIR') )
      define( 'WP_CONTENT_DIR', ABSPATH . 'wp-content' );
    return WP_CONTENT_DIR;
  }

  function get_plugin_dir() {
    // Pre-2.6 compatibility
    return $this->get_content_dir().'/plugins/'.plugin_basename(dirname(__FILE__));
  }

  function get_plugin_url() {
    // Pre-2.6 compatibility
    if ( !defined('WP_CONTENT_URL') )
      define( 'WP_CONTENT_URL', get_option('siteurl') . '/wp-content');
    return WP_CONTENT_URL.'/plugins/'.plugin_basename(dirname(__FILE__));
  }

  function get_current_page_url() {
    $isHTTPS = (isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"] == "on");
    $port = (isset($_SERVER["SERVER_PORT"]) && ((!$isHTTPS && $_SERVER["SERVER_PORT"] != "80") || ($isHTTPS && $_SERVER["SERVER_PORT"] != "443")));
    $port = ($port) ? ':'.$_SERVER["SERVER_PORT"] : '';
    $url = ($isHTTPS ? 'https://' : 'http://').$_SERVER["SERVER_NAME"].$port.$_SERVER["REQUEST_URI"];
    return $url;
  }

  function style_to_array($quoted=true){
    $bsa_options = get_option($this->name);
    $style = $bsa_options['style'];
    // clean white spaces
    $style = join('', $this->array_trim(split(chr(10), str_replace(chr(13), '', $style))));
    // split into clauses
    $style = split('}', $style);
    array_pop($style); // last element is empty so get rid of it
    if ( $quoted ) {
      $callback = create_function('$e', 'return \'"\'.$e.\'}"\';');
    }
    else {
      $callback = create_function('$e', 'return $e.\'}\';');
    }
    return array_map($callback, $style);
  }

  function get_bsa_script($id, $show_ad_here=null, $nofollow=null){
    if ( is_numeric($id) ) {
      $bsa_options = get_option($this->name);
      if ( $bsa_options['enable_aab'] ) {
        $script_host = get_option('siteurl');
        $script_path = '/'.$bsa_options['nonce_proxy'].$this->encrypt('http://'.$this->bsa_url.'/'.$id.'/'.$id.'.js?v=', $bsa_options['nonce_proxy']).'//';
      }
      else {
        $script_host = 'http://'.$this->bsa_url;
        $script_path = '/'.$id.'/'.$id.'.js?v="+Date.parse(new Date())+"';
      }
      $script = sprintf('
        '
      );
      return $script;
    }
    return '';
  }

  function print_zone($id) {
    echo $this->get_zone_html($id);
  }

  function filter_content($content) {
    if (!$this->is_excerpt && (is_page() || is_single())) {
      // don't filter if this is an excerpt
      $bsa_options = get_option($this->name);
      foreach ($bsa_options['zones'] as $k => $v) {
        if ($bsa_options['zone_settings'][$v['id']]['placement'] == 'posts') {
          if ($bsa_options['zone_settings'][$v['id']]['position'] == 'after') {
            return $content . $this->get_zone_html($v['id']);
          }
          else {
            return $this->get_zone_html($v['id']) . $content;
          }
        }
      }
    }
    $this->is_excerpt = false;
    return $content;
  }

  function get_zone_html($id) {
    $bsa_options = get_option($this->name);
    return '<div id="bsap_'.$id.'" class="bsarocks bsap_'.$bsa_options['site_key'].'"></div><div style="clear:both"></div>';
  }

  function mark_excerpt($excerpt) {
    $this->is_excerpt = true;
    return $excerpt;
  }

  function widget_init() {
    register_widget('BSAZoneWidget');
  }

  function array_trim($arr, $charlist=null){
    foreach($arr as $key => $value){
      if (is_array($value)) $result[$key] = array_trim($value, $charlist);
      else $result[$key] = trim($value, $charlist);
    }
    return $result;
  }

  function admin_menu() {
    $options_page = add_options_page('Buy Sell Ads', 'Buy Sell Ads', 'manage_options', 'buy-sell-ads', array($this, 'admin_page'));
    add_action('admin_print_styles-'.$options_page, array($this, 'queue_styles'));
    add_action('admin_print_styles-'.$options_page, array($this->c, 'a_enqueue_styles'));
    add_action('admin_print_scripts-'.$options_page, array($this->c, 'a_enqueue_scripts'));
  }

  function admin_page() {
    if ( isset($_POST['bsa_options_update_submit']) ) {
      // if user wants to update options
      check_admin_referer($this->name);
      $this->update_options();
      $this->update_zones_info();
      printf('<div class="updated fade"><p>%s</p></div>', __('Buy Sell Ads options has been updated.', $this->name));
    }
    elseif ( isset($_POST['bsa_options_regenerate_nonce_submit']) ) {
      // if user wants to regenerate nonce
      check_admin_referer($this->name);
      $this->set_nonce_proxy();
      printf('<div class="updated fade"><p>%s</p></div>', __('Buy Sell Ads nonce has been re-generated.', $this->name));
    }
    elseif ( isset($_POST['bsa_options_upgrade_submit']) ) {
      // if user wants to upgrade options ( for new options on version upgrades )
      check_admin_referer($this->name);
      $this->upgrade_options();
      printf('<div class="updated fade"><p>%s</p></div>', __('Buy Sell Ads options has been upgraded.', $this->name));
    }
    elseif ( isset($_POST['bsa_options_reset_submit']) ) {
      // if user wants to reset all options
      check_admin_referer($this->name);
      $this->reset_options();
      $this->set_nonce_proxy();
      printf('<div class="updated fade"><p>%s</p></div>', __('Buy Sell Ads options has been reset.', $this->name));
    }

    printf('
      <div class="wrap">
        <h2>Buy Sell Ads Options</h2>
        <div>
          <a href="%s">%s</a>&nbsp;|&nbsp;
          <a href="%s">%s</a>
        </div>
        <div class="omni_admin_main">',
      preg_replace('/&bsa-page=[^&]*/', '', $_SERVER['REQUEST_URI']),
      __('General Configurations', $this->name),
      $this->homepage,
      __('Documentation', $this->name)
    );
    if ( isset($_GET['bsa-page']) ) {
      if ( $_GET['bsa-page'] || !$_GET['bsa-page'] ) {
        require_once('options-generic.php');
      }
    }
    else {
      require_once('options-generic.php');
    }
    printf('
        </div><!--omni_admin_main-->
      </div><!--wrap-->'
    );
    require_once('options-sidebar.php');
  } // function admin_page()
} // class bsa

// Hack for PHP4
if (!function_exists('json_decode')) {
  function json_decode($content, $assoc=false) {
    require_once 'Services/JSON.php';
    if ($assoc) {
      $json = new Services_JSON(SERVICES_JSON_LOOSE_TYPE);
    } else {
      $json = new Services_JSON;
    }
    return $json->decode($content);
  }
}

// Hack for PHP4
if ( !function_exists('json_encode') ){
  function json_encode($content){
    require_once 'Services/JSON.php';
    $json = new Services_JSON;
    return $json->encode($content);
  }
}

$buy_sell_ads = new BuySellAds();

add_action('admin_notices', array($buy_sell_ads, 'check_version'));
add_action('admin_init', array($buy_sell_ads, 'register_styles'));
add_action('admin_init', array($buy_sell_ads->c, 'a_register_styles'));
add_action('admin_init', array($buy_sell_ads->c, 'a_register_scripts'));
add_action('admin_menu', array($buy_sell_ads, 'admin_menu'));
add_action('get_the_excerpt', array($buy_sell_ads, 'mark_excerpt'), 1); // set priority to 1 or else it'll run after the post handler
add_action('init', array($buy_sell_ads, 'check_for_zone_update'));
add_action('plugins_loaded', array($buy_sell_ads, 'proxy'));
add_action('widgets_init', array($buy_sell_ads, 'widget_init'));
add_action('wp_print_scripts', array($buy_sell_ads, 'queue_jquery'));
add_action('wp_footer', array($buy_sell_ads, 'embed_bsa_js'));

add_filter('the_content', array($buy_sell_ads, 'filter_content'), 100);

register_activation_hook(__FILE__, array($buy_sell_ads, 'activate'));

// function used for template insertion
function bsa_zone($id){
  global $buy_sell_ads;
  $buy_sell_ads->print_zone($id);
}

?>
